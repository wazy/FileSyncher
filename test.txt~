#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
 
 
int main(int argc, char *argv[])
{
    //Declaring process variables.
    int server_sockfd, client_sockfd;
    int server_len ; 
    int rc ; 
    unsigned client_len;
    struct sockaddr_in server_address;
    struct sockaddr_in client_address;

    //Remove any old socket and create an unnamed socket for the server.
    server_sockfd = socket(AF_INET, SOCK_STREAM, 0);
    server_address.sin_family = AF_INET;
    server_address.sin_addr.s_addr = htons(INADDR_ANY);
    server_address.sin_port = htons(7735);
    server_len = sizeof(server_address);

    bind(server_sockfd, (struct sockaddr *) &server_address, server_len);
    
    printf("Server is initialized and listening for clients..\n");
    
    //Create a connection queue and wait for clients
    listen(server_sockfd, 5);
 
    client_len = sizeof(client_address);
    client_sockfd = accept(server_sockfd, (struct sockaddr *) &client_address, &client_len);
    printf("\nClient socket is number = %d.\n\n", client_sockfd) ; 
    
    FILE *fp1;
 
    fp1 = fopen("./test.txt", "w+");
    while(1)
    {
        char ch[100];
        size_t len;
        len = sizeof(ch);
        // recieve from client on client_sockfd
        rc = recv(client_sockfd, &ch, len, 0);
        // if nothing left to read end loop
        if (rc <= 0) 
            break;
        // this is only for debugging
        printf("%s", ch );
        fwrite(ch, sizeof(ch), 1, fp1);
    }
    fclose(fp1);
    //shutdown(client_sockfd, 1);
    //write(client_sockfd, "Finished", 1);
    close(client_sockfd);
    return 0;
}
nt_sockfd, 1);
    //write(client_sockfd, "Finished", 1);
    close(client_s